team
#slice(arrange(summarise(group_by(dat, team)), mean_triple = mean(points3)))
team <- summarise(group_by(dat, team), average_3points = points3)
team <- summarise(group_by(dat, team), average_3points = mean(points3))
team
#slice(arrange(summarise(group_by(dat, team)), mean_triple = mean(points3)))
team_by_points <- summarise(group_by(dat, team), average_3points = mean(points3))
slice(arrange(team_by_points, average_3points), nrow(team_by_points):nrow(team_by_points-4))
nrow(team_by_points)
team_by_points <- summarise(group_by(dat, team), average_3points = mean(points3))
slice(arrange(team_by_points, average_3points), nrow(team_by_points):nrow(team_by_points-4))
team_by_points <- summarise(group_by(dat, team), average_3points = mean(points3))
slice(arrange(team_by_points, average_3points), nrow(team_by_points):nrow(team_by_points)-4)
#slice(arrange(summarise(group_by(dat, team)), mean_triple = mean(points3)))
team_by_points <- summarise(group_by(dat, team), average_3points = mean(points3))
slice(arrange(team_by_points, average_3points), nrow(team_by_points):(nrow(team_by_points)-4))
#slice(arrange(summarise(group_by(dat, team)), mean_triple = mean(points3)))
team_by_points <- summarise(group_by(dat, team), average_3points = mean(points3))
slice(arrange(team_by_points, average_3points), nrow(team_by_points):(nrow(team_by_points)-4))
slice(arrange(team_by_points, average_3points))
#slice(arrange(summarise(group_by(dat, team)), mean_triple = mean(points3)))
team_by_points <- summarise(group_by(dat, team), average_3points = mean(points3))
slice(arrange(team_by_points, average_3points), (nrow(team_by_points)-4):nrow(team_by_points))
#slice(arrange(summarise(group_by(dat, team)), mean_triple = mean(points3)))
team_by_points <- summarise(group_by(dat, team), average_3points = mean(points3))
slice(arrange(team_by_points, average_3points), (nrow(team_by_points)-4):nrow(team_by_points))
group_by(dat, position)
group_by(dat, position)
# with "base" read.csv()
dat <- read.csv('nba2017-players.csv', stringsAsFactors = FALSE)
# with "readr" read_csv()
library(readr)
dat <- read_csv('nba2017-players.csv'
position = col_factor())
# with "base" read.csv()
dat <- read.csv('nba2017-players.csv', stringsAsFactors = FALSE)
# with "readr" read_csv()
library(readr)
dat <- read_csv('nba2017-players.csv',
position = col_factor())
# with "base" read.csv()
dat <- read.csv('nba2017-players.csv', stringsAsFactors = FALSE)
# with "readr" read_csv()
library(readr)
dat <- read_csv('nba2017-players.csv',
position = factor(position))
group_by(dat, position)
group_by(dat, height)
group_by(dat, team)
summarise(group_by(dat, position == "PF" & experience == 5 & experience == 10), mean_age = mean(age), std_age = sd(age))
summarise(group_by(dat, position == "PF"), mean_age = mean(age), std_age = sd(age))
summarise(group_by(dat, position), mean_age = mean(age), std_age = sd(age))
summarise(group_by(dat, c(position, experience == 5, experience == 10)), mean_age = mean(age), std_age = sd(age))
summarise(group_by(dat, position), mean_age = mean(age), std_age = sd(age))
summarise(group_by(dat, c(position, experience), mean_age = mean(age), std_age = sd(age))
summarise(group_by(dat, c(position, experience)), mean_age = mean(age), std_age = sd(age))
summarise(group_by(dat, position), mean_age = mean(age), std_age = sd(age))
summarise(group_by(dat, experience), mean_age = mean(age), std_age = sd(age))
dat[dat[position == "PF"], ]
dat[dat[, position == "PF"], ]
dat[dat[, position == "PF"], ]
#dat[dat[, position == "PF"], ]
summarise(group_by(dat, experience), mean_age = mean(age), std_age = sd(age))
dat[dat[, position == "PF"], ]
# don't forget to load the packages
library(dplyr)
library(ggplot2)
dat <- read.csv('nba2017-players.csv', stringsAsFactors = FALSE)
# first three rows
three_rows <- slice(dat, 1:3)
three_rows
# subset rows given a condition
# (height greater than 85 inches)
gt_85 <- filter(dat, height > 85)
gt_85
# columns by name
player_height <- select(dat, player, height)
player_height
slice(dat, 1:5)
slice(dat, c(10, 15, 20, 25, 30, 35, 40, 45, 50))
slice(dat, nrow(dat):(nrow(dat)-4))
filter(dat, height < 70)
filter(dat, team == "GSW")
filter(dat, team == "GSW" & position == "C")
lakers <- filter(dat, team == "LAL")
select(lakers, player)
GSW_PG <- filter(dat, team == "GSW" & position == "PG")
select(GSW_PG, player)
exp_salary <- filter(dat, experience == 10 & salary <= 10000000)
select(exp_salary, c(player, age, team))
age <- filter(dat, age == 20)
slice(select(age, c(player, team, height, weight)), 1:5)
# creating a small data frame step by step
gsw <- filter(dat, team == 'GSW')
gsw <- select(gsw, player, height, weight)
gsw <- slice(gsw, c(4, 8, 10, 14, 15))
gsw
mutate(gsw, height / weight)
mutate(gsw, ht_wt = height / weight)
gsw2 <- mutate(gsw, ht_m = height * 0.0254, wt_kg = weight * 0.4536)
gsw2
# order rows by height (increasingly)
arrange(gsw, height)
# order rows by height (decreasingly)
arrange(gsw, desc(height))
# order rows by height, and then weight
arrange(gsw, height, weight)
gsw <- mutate(gsw, product = height * weight)
gsw
gsw3 <- mutate(gsw, log_height = log(height), log_weight = log(weight))
gsw3
arrange(filter(dat, height < 71), height)
slice(select(arrange(dat, desc(salary)), c(player, team, salary)), 1:5)
slice(select(arrange(dat, desc(salary)), c(player, team, salary)), 1:5)
slice(select(arrange(dat, desc(points3)), c(player, team, points3)), 1:10)
gsw_dat <- arrange(mutate(filter(dat, team == "GSW"), min_per_game = minutes/games), desc(min_per_game))
gsw_mpg <- select(gsw_dat, c(player, experience, min_per_game))
gsw_mpg
# average salary of NBA players
summarise(dat, avg_salary = mean(salary))
mean(dat$salary)
# some stats for salary (dplyr)
summarise(
dat,
min = min(salary),
median = median(salary),
avg = mean(salary),
max = max(salary)
)
# some stats for salary (base R)
c(min = min(dat$salary),
median = median(dat$salary),
median = mean(dat$salary),
max = max(dat$salary))
# average salary, grouped by team
summarise(
group_by(dat, team),
avg_salary = mean(salary)
)
# average salary, grouped by position
summarise(
group_by(dat, position),
avg_salary = mean(salary)
)
arrange(
summarise(
group_by(dat, position),
avg_height = mean(height),
avg_weight = mean(weight)),
desc(avg_height)
)
summarise(dat, max_height = max(height))
summarise(dat, std_points3 = sd(points3))
summarise(group_by(dat, team), median_points = median(points3))
team_by_points <- summarise(group_by(dat, team), average_3points = mean(points3))
slice(arrange(team_by_points, average_3points), (nrow(team_by_points)-4):nrow(team_by_points))
dat[dat[, position == "PF"], ]
dat[dat[position == "PF", ], ]
dat[dat[, "position" == "PF" ], ]
dat[dat[, "position"] == "PF", ]
summarise(group_by(dat, experience), mean_age = mean(age), std_age = sd(age))
dat[dat[, "position"] == "PF" & dat[, "experience"] == 5, ]
summarise(group_by(dat, experience), mean_age = mean(age), std_age = sd(age))
dat[dat[, "position"] == "PF" & dat[, "experience"] == 5 & dat[, "experience"] == 10, ]
summarise(group_by(dat, experience), mean_age = mean(age), std_age = sd(age))
dat[dat[, "position"] == "PF" & dat[, "experience"] == 5, ]
summarise(group_by(dat, experience), mean_age = mean(age), std_age = sd(age))
dat[dat[, "position"] == "PF" & dat[, "experience"] == 5 | 10, ]
summarise(group_by(dat, experience), mean_age = mean(age), std_age = sd(age))
dat[dat[, "position"] == "PF" & dat[, "experience"] == 5 || 10, ]
summarise(group_by(dat, experience), mean_age = mean(age), std_age = sd(age))
dat[dat[, "position"] == "PF" & dat[, "experience"] == 5 | dat[, "experience"] | 10, ]
summarise(group_by(dat, experience), mean_age = mean(age), std_age = sd(age))
dat[dat[, "position"] == "PF" & dat[, "experience"] == c(5,10), ]
summarise(group_by(dat, experience), mean_age = mean(age), std_age = sd(age))
#dat[dat[, "position"] == "PF" & dat[, "experience"] == c(5,10), ]
#summarise(group_by(dat, experience), mean_age = mean(age), std_age = sd(age))
filter(dat, position == "PF", (experience == 5 | experience == 10))
#summarise(group_by(dat, experience), mean_age = mean(age), std_age = sd(age))
five_ten_PF <- filter(dat, position == "PF", (experience == 5 | experience == 10))
summarise(five_ten_PF, mean_age = mean(age), std_age = sd(age))
five_ten_PF <- filter(dat, position == "PF", (experience == 5 | experience == 10))
summarise(five_ten_PF, mean_age = mean(age), std_age = sd(age))
# scatterplot (option 1)
ggplot(data = dat) +
geom_point(aes(x = points, y = salary))
# scatterplot (option 2)
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point()
# colored scatterplot
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point(aes(color = position))
# sized and colored scatterplot
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point(aes(color = position, size = points3))
# sized and colored scatterplot
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point(aes(color = position, size = points3), alpha = 0.7)
ggplot(dat, aes(height, weight)
+ geom_point())
ggplot(dat, aes(x = height, y = weight)
+ geom_point())
ggplot(dat, aes(height, weight)) + geom_point()
# scatterplot by position
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point() +
facet_wrap(~ position)
# scatterplot by position
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point(aes(color = position), alpha = 0.7) +
facet_grid(~ position) +
geom_smooth(method = loess)
# scatterplot by position
ggplot(data = dat, aes(x = points, y = salary)) +
geom_point(aes(color = position), alpha = 0.7) +
facet_grid(position ~ .) +
geom_smooth(method = loess)
ggplot(dat, aes(experience, salary)) + geom_point + facet_wrap(~ position)
ggplot(dat, aes(experience, salary)) + geom_point() + facet_wrap(~ position)
ggplot(dat, aes(experience, salary)) + geom_point(aes(color = position), alpha = 0.5) + facet_wrap(~ position)
ggplot(dat, aes(experience, team)) + geom_point(aes(color = team), alpha = 0.6) + facet_wrap(~ team)
ggplot(dat, aes(age)) + geom_density(aes(color = team), alpha = 0.5) + facet_wrap(~ team)
ggplot(dat, aes(height, weight)) + geom_point(aes(color = position)) + facet_wrap(~ position)
ggplot(dat, aes(height, weight)) + geom_density2d(aes(color = position)) + facet_wrap(~ position)
?read.table
help("read.table")
?load
load(ggplot2)
library(ggplot2)
library(ggplot)
library(ggplot2)
man(ggplot)
# dummy vector
a <- c(5, 6, 7, 8)
# logical subsetting
a[c(TRUE, FALSE, TRUE, FALSE)]
four[TRUE]
four[c(TRUE, FALSE)]
four <- player[1:4]
# load data in your R session
load('nba2017-salary-points.RData')
# your code here
class('player')
class('team')
class('points')
class('points1')
class('points2')
class('points3')
class('position')
class('rdata')
class('salary')
# your code here
length('player')
length('team')
length('points')
length('points1')
length('points2')
length('points3')
length('position')
length('rdata')
length('salary')
tail('player')
tail('team')
tail('points')
tail('points1')
tail('points2')
tail('points3')
tail('position')
tail('rdata')
tail('salary')
summary('player')
summary('team')
summary('points')
summary('points1')
summary('points2')
summary('points3')
summary('position')
summary('rdata')
summary('salary')
# check whether the loaded objects are vectors
is.vector('player')
is.vector('position')
is.vector('team')
is.vector('points')
is.vector('points1')
is.vector('points2')
is.vector('points3')
is.vector('rdata')
is.vector('salary')
# check whether the loaded objects are atomic objects
is.atomic('player')
is.atomic('position')
is.atomic('team')
is.atomic('points')
is.atomic('points1')
is.atomic('points2')
is.atomic('points3')
is.atomic('rdata')
is.atomic('salary')
four <- player[1:4]
# dummy vector
a <- c(5, 6, 7, 8)
# logical subsetting
a[c(TRUE, FALSE, TRUE, FALSE)]
# your turn
four[c(TRUE, TRUE, TRUE, TRUE)]
four[c(TRUE, TRUE, FALSE, FALSE)]
four[c(FALSE, FALSE, TRUE, TRUE)]
four[c(TRUE, FALSE, TRUE, FALSE)]
four[c(FALSE, FALSE, FALSE, FALSE)]
four[TRUE]
four[c(TRUE, FALSE)]
typeof(c(x, 10))
x <- c(TRUE, FALSE)
y <- c(x, 10)
z <- c(y, 10, "a")
typeof(c(x, 10))
x <- c(TRUE, FALSE)
y <- c(x, 10)
z <- c(y, 10, "a")
typeof(y)
x <- c(TRUE, FALSE)
y <- c(x, 10)
z <- c(y, 10, "a")
typeof(y)
y
x <- c(TRUE, FALSE)
y <- c(x, 10)
z <- c(y, 10, "a")
typeof(z)
y
x <- c(TRUE, FALSE)
y <- c(x, 10)
z <- c(y, 10, "a")
typeof(z)
z
x <- c(TRUE, FALSE)
y <- c(x, 10)
z <- c(y, 10, "a", )
x <- c(TRUE, FALSE)
y <- c(x, 10)
z <- c(y, 10, "a")
typeof(z)
z
x <- 6
x > 5
1:3
sqrt(4)
seq(1.0, 2.0, 0.1)
rep(c(1,2,3), 2)
rep(1:3, 2)
rep(1:3, each = 2)
matrix(c(1,2,3,4))
matrix(c(1:12), nrow = 4, ncol = 4)
matrix(c(1:12), nrow = 4, ncol = 3)
matrix(c(1:12), nrow = 4, ncol = 3, byrow = TRUE)
?:
help(:)
help(':')
help(":")
?read.csv
lisence()
lecense()
license()
contributors()
citation()
demo()
a <- c(1,2,3,4)
a
x <- c(1,2,4,5)
class(x)
x <- c(1.0,2,4,5)
class(x)
x <- c("c",2,4,5)
class(x)
plot(new_experience, new_salary, pch = 20, col = "grey", cex = 10, xlab = "Years of Experience", ylab = "Salary in Millions of Dollars", main = "Scatterplot with lowess smooth")
load("data/nba2017-salary-points.RData")
ls()
new_salary <- round(salary / 1000000, digits = 2)
new_salary
new_experience <- gsub("R", 0, experience)
new_experience <- as.integer(new_experience)
new_experience
new_position <- gsub('C', 'center', position)
new_position <- gsub('SF', 'small_fwd', new_position)
new_position <- gsub('PF', 'power_fwd', new_position)
new_position <- gsub('SG', 'shoot_guard', new_position)
new_position <- gsub('PG', 'point_guard', new_position)
new_position <- factor(new_position)
new_position
table(new_position)
plot(points, new_salary, pch = ".", col = 20, cex = 1.5, xlab = "Number of Points", ylab = "Salary in Millions of Dollars", main = "Scatter of the Number of Points and Salaries of Players")
#?pch
# This scatter plot of points and salary in millions of dollars displays a positive and slightly strong association between the two variables. The data is mostly concentrated within the 0 to 500 point range and more scattered the more points the players make.
n <- length(player)
n
x_mean <- sum(points) / n
x_mean
y_mean <- sum(new_salary) / n
y_mean
x_var <- sum((points - x_mean)^2) * (1 / (n - 1))
x_var
y_var <- sum((new_salary - y_mean)^2) * (1 / (n - 1))
y_var
std_x <- sqrt(x_var)
std_x
std_y <- sqrt(y_var)
std_y
cov_xy <- sum((points - x_mean) * (new_salary - y_mean)) * (1 / (n - 1))
cov_xy
corr_xy <- cov_xy / (std_x * std_y)
corr_xy
b_one <- corr_xy * (std_y / std_x)
b_zero <- y_mean - (b_one * x_mean)
Y <- b_zero + b_one * points
summary(Y)
b_one
#For every point that a player scores, the salary that they receive, according to the regression equation, goes up by $8557.567
b_zero
#According to the regression equation, for a player that scores 0 points, he will earn $1,509,077.
zero_points <- b_zero + b_one * 0
#Player scoring 0 points earns $1,509,077 million.
zero_points
hundred_points <- b_zero + b_one * 100
#Player scoring 100 points earns $2,364,833 million.
hundred_points
five_hundred_points <- b_zero + b_one * 500
#Player scoring 500 points earns $5,787,860 million.
five_hundred_points
thousand_points <- b_zero + b_one * 1000
#Player scoring 1000 points earns $10,066,640 million.
thousand_points
two_thousand_points <- b_zero + b_one * 2000
#Player scoring 2000 points earns $18,624,210 million.
two_thousand_points
plot(points, new_salary, pch = ".", col = 20, cex = 1.5, xlab = "Number of Points", ylab = "Salary in Millions of Dollars", main = "Scatter of the Number of Points and Salaries of Players")
abline(a = b_zero, b = b_one, lwd = 2, col = "red")
lines(lowess(x = points, y = new_salary), col = "blue", lwd = 2)
text(2200, 15, labels = "regression", col = "red")
text(2200, 30, labels = "lowess", col = "blue")
residuals <- new_salary - Y
summary(residuals)
RSS <- sum((new_salary - Y)^2)
RSS
TSS <- sum((new_salary - y_mean)^2)
TSS
R_squared <- 1 - RSS / TSS
R_squared
plot(new_experience, new_salary, pch = 20, col = "grey", cex = 10, xlab = "Years of Experience", ylab = "Salary in Millions of Dollars", main = "Scatterplot with lowess smooth")
lines(lowess(new_experience, new_salary), col = "blue", lwd = 2)
#Experience does not appear to be strongly related to salary. Although salary does increase initially as years of experience increases, this slight change is only seen when players first start playing. After around 8 years of playing, each additional year shows a decrease in salary earned by players.
plot(new_experience, new_salary, pch = 20, col = "grey", cex = .5, xlab = "Years of Experience", ylab = "Salary in Millions of Dollars", main = "Scatterplot with lowess smooth")
lines(lowess(new_experience, new_salary), col = "blue", lwd = 2)
#Experience does not appear to be strongly related to salary. Although salary does increase initially as years of experience increases, this slight change is only seen when players first start playing. After around 8 years of playing, each additional year shows a decrease in salary earned by players.
plot(new_experience, new_salary, pch = 20, col = "grey", cex = 1, xlab = "Years of Experience", ylab = "Salary in Millions of Dollars", main = "Scatterplot with lowess smooth")
lines(lowess(new_experience, new_salary), col = "blue", lwd = 2)
#Experience does not appear to be strongly related to salary. Although salary does increase initially as years of experience increases, this slight change is only seen when players first start playing. After around 8 years of playing, each additional year shows a decrease in salary earned by players.
plot(new_experience, new_salary, pch = 20, col = "grey", cex = .5, xlab = "Years of Experience", ylab = "Salary in Millions of Dollars", main = "Scatterplot with lowess smooth")
lines(lowess(new_experience, new_salary), col = "blue", lwd = 2)
#Experience does not appear to be strongly related to salary. Although salary does increase initially as years of experience increases, this slight change is only seen when players first start playing. After around 8 years of playing, each additional year shows a decrease in salary earned by players.
plot(new_experience, new_salary, pch = 20, col = "grey", cex = .5, xlab = "Years of Experience", ylab = "Salary in Millions of Dollars", main = "Scatterplot with lowess smooth")
lines(lowess(new_experience, new_salary), col = "blue", lwd = 5)
#Experience does not appear to be strongly related to salary. Although salary does increase initially as years of experience increases, this slight change is only seen when players first start playing. After around 8 years of playing, each additional year shows a decrease in salary earned by players.
x <- c("c",2,4,5)
class(x)
x + 2
x <- c(FALSE,2,4,5)
class(x)
x + 2
x <- c(1,2,3,4,5,6,56)
x[TRUE]
x <- c(1,2,3,4,5,6,56)
x[1]
x <- c(1,2,3,4,5,6,56)
x[TRUE]
x <- c(1,2,3,4,5,6,56)
x[as.logical(c(0,1,pi,-10))]
c(2,1) + c(1,2,3)
c(2,1) + c(1,2,3,4)
c(2,1) + c(1,2,3,4)
c(1,2,3,4) + c(2,1)
c(2,1) + c(1,2,3,4)
c(1,2,3) + c(1,2)
rm(list = ls())
getwd()
setwd("/stat133/stat133-hws-fall17/hw03/data"
)
setwd("~/stat133/stat133-hws-fall17/hw03/data")
getwd()
library(readr)
roster <- read_csv("~/nba2017-roster.csv")
stats <- read_csv("~/nba2017-stats.csv")
roster <- read_csv("~/data/nba2017-roster.csv")
stats <- read_csv("~/data/nba2017-stats.csv")
roster <- read_csv("./nba2017-roster.csv")
stats <- read_csv("./data/nba2017-stats.csv")
stats <- read_csv("./nba2017-stats.csv")
library(dplyr)
source('~/stat133/stat133-hws-fall17/hw03/report/make-teams-table.R', echo=TRUE)
source('~/stat133/stat133-hws-fall17/hw03/report/make-teams-table.R', echo=TRUE)
source('~/stat133/stat133-hws-fall17/hw03/report/make-teams-table.R', echo=TRUE)
source('~/stat133/stat133-hws-fall17/hw03/report/make-teams-table.R', echo=TRUE)
source('~/stat133/stat133-hws-fall17/hw03/report/make-teams-table.R', echo=TRUE)
source('~/stat133/stat133-hws-fall17/hw03/report/make-teams-table.R', echo=TRUE)
roster <- read_csv("./nba2017-roster.csv", col_types = col(
position = col_factor(NULL)))
roster <- read_csv("./nba2017-roster.csv", col_types = col(
Position = col_factor(NULL)))
roster <- read_csv("./nba2017-roster.csv", col_types = col(
position = col_factor(c("C", "PG", "SF", "PF", "SG"))))
roster <- read_csv("./nba2017-roster.csv", col_types = cols(
position = col_factor(c("C", "PG", "SF", "PF", "SG"))))
